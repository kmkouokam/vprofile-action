name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vprofileapp
  EKS_CLUSTER: vprofile-eks

jobs:
  Testing:
  runs-on: ubuntu-latest
  steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Mavent Test
      run: mvn Test

    - name: Checkstyle
      run: mvn Checkstyle:checkstyle

    # Setup java 11 to be default (sonar-scaner requirement as of 5.x)
    - name: Set java 11
      uses: actions/setup-java@v3
      with:
        distribution: "temerin" # See 'supported distribution' for available options
        java-version: "11"

    # Setup Sonar-Scanner cli installation
    - name: Setup Sonarqube
      uses: warchant/setup-sonar-scanner@v7

    # run Sonar-Scanner
    - name: SonarQube Scan
      run: sonar-scaner
        -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
        -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
        -Dsonar.sources=src/
        -Dsonar.junit.reportsPath=target/surefire-reports/
        -Dsonar.jacoco.reportsPath=target/jacoco.exec
        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml

    # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL

  BUILS_AND_PUSH:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.aws_access_key_id }}
          secret_key: ${{ secrets.aws_secret_access_key }}
          registry: ${{ secrets.registry }}
          cache_from: ${{ secrets.cache }}
          repo: api-sample
          region: ap-northeast-1
          #auto_tag: true
          tags: lates,${{github.run_number}}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./

  DeployToEKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Print config file
        run: cat ~/.kube/config

      - name: Login to ECR
        run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS  --docker-password=$(aws ecr get-login-password)

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          #config-files: .github/values/dev.yaml
          chart-path: helm/vprofilecharts
          namespace: default
          values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
          name: vprofile-stack

          ##
